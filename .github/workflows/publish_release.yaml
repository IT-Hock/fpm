name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    # only merged pull requests that begin with 'release/' or 'hotfix/' must trigger this job
    if: github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix/'))

    steps:
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.2.0
        with:
          gpg_private_key: ${{ secrets.SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_PASSWORD }}
          fingerprint: "B42AE76D432131F5D3977D733111556EC95FC0A4"
          git_config_global: true
          git_user_signingkey: true
          git_push_gpgsign: true
          git_tag_gpgsign: true
          git_commit_gpgsign: true

      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3.2.0
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version-file: go.mod

      - name: Install dependencies
        run: go get .

      - name: Test with Go
        run: go test -json > TestResults-${{ matrix.go-version }}.json

      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        with:
          name: Go-results-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Task
        run: task default
        env:
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}

      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          body_path: CHANGELOG.md
          name: ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          files: |
            ./dist/fpm.linux-amd64
            ./dist/fpm.linux-amd64.sig
            ./dist/fpm.linux-arm64
            ./dist/fpm.linux-arm64.sig
            ./dist/fpm.darwin-amd64
            ./dist/fpm.darwin-amd64.sig

      - name: Merge main into dev branch
        uses: thomaseizinger/create-pull-request@1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: dev
          title: Merge main into dev branch
          body: |
            This PR merges the main branch back into dev.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.